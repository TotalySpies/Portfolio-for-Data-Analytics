WITH account_metrics AS (
    SELECT
        s.date AS date,
        sp.country,
        a.send_interval,
        a.is_verified,
        a.is_unsubscribed,
        COUNT(a.id) AS account_cnt,
        0 AS sent_msg,
        0 AS open_msg,
        0 AS visit_msg
    FROM `DA.account` a
    JOIN `DA.account_session` acs   ON a.id = acs.account_id
    JOIN `DA.session_params` sp     ON sp.ga_session_id = acs.ga_session_id
    JOIN `DA.session` s             ON s.ga_session_id = sp.ga_session_id
    GROUP BY s.date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),
email_metrics AS (
    SELECT
        DATE_ADD(s.date, INTERVAL es.sent_date DAY) AS date,  
        sp.country,
        a.send_interval,
        a.is_verified,
        a.is_unsubscribed,
        0 AS account_cnt,
        COUNT(DISTINCT es.id_message) AS sent_msg,
        COUNT(DISTINCT eo.id_message) AS open_msg,
        COUNT(DISTINCT ev.id_message) AS visit_msg
    FROM `DA.email_sent` es
    LEFT JOIN `DA.email_open` eo ON eo.id_message = es.id_message
    LEFT JOIN `DA.email_visit` ev ON es.id_message = ev.id_message
    JOIN `DA.account_session` acs ON acs.account_id = es.id_account
    JOIN `DA.session_params` sp ON sp.ga_session_id = acs.ga_session_id
    JOIN `DA.session` s ON s.ga_session_id = sp.ga_session_id
    JOIN `DA.account` a ON a.id = acs.account_id
    GROUP BY date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),
unions AS (
    SELECT * FROM account_metrics
    UNION ALL
    SELECT * FROM email_metrics
),
final_groups AS (
    SELECT
        date,
        country,
        send_interval,
        is_verified,
        is_unsubscribed,
        SUM(account_cnt) AS account_cnt,
        COALESCE(SUM(sent_msg), 0) AS sent_msg,
        COALESCE(SUM(open_msg), 0) AS open_msg,
        COALESCE(SUM(visit_msg), 0) AS visit_msg
    FROM unions
    GROUP BY date, country, send_interval, is_verified, is_unsubscribed
),
country_aggregation AS (
    SELECT
       date,
        country,
        send_interval,
        is_verified,
        is_unsubscribed,
         account_cnt,
         sent_msg,
         open_msg,
        visit_msg,
        SUM(account_cnt) OVER (PARTITION BY country) AS total_country_account_cnt,
        SUM(sent_msg) OVER (PARTITION BY country) AS total_country_sent_cnt
    FROM final_groups
),
sums AS (
    SELECT
        date,
        country,
        send_interval,
        is_verified,
        is_unsubscribed,
        account_cnt,
        sent_msg,
        open_msg,
        visit_msg,
        total_country_account_cnt,
        total_country_sent_cnt,
        DENSE_RANK() OVER (ORDER BY total_country_account_cnt DESC) AS rank_total_country_account_cnt,
        DENSE_RANK() OVER ( ORDER BY total_country_sent_cnt DESC) AS rank_total_country_sent_cnt
    FROM country_aggregation
    
)
SELECT *
FROM sums
WHERE rank_total_country_account_cnt <= 10 OR rank_total_country_sent_cnt <= 10
